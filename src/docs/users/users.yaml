
  paths: 
    /api/users:
      get:
        summary: Obtener todos los usuarios
        tags:
          - Users
        responses:
          200:
            description: Users found
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          400:
            description: Parámetros inválidos en la consulta.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          500:
            description: Error interno del servidor.
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Error'
    /api/users/{id}:
      get:
        summary: Obtener un usuario por id
        description: Devuelve el usuario que tenga el id enviado
        tags:
        - Users
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
            description: id del usuario que se desea solicitar
        responses:
          200:
            description: User found
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/User'
          404:
            description: User not found
            content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/Error'
          500:
            description: Error interno del servidor.
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Error'
      put:
        summary: Actualizar un usuario por id
        description: Actualiza el usuario que tenga el id enviado
        tags:
        - Users
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
              description: id del usuario que se desea actualizar
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
        responses:
          200:
            description: User updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          500:
            description: Error interno del servidor.
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Error'
      delete:
        summary: Eliminar un usuario por id
        description: Elimina el usuario que tenga el id enviado
        tags:
        - Users
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
              description: id del usuario que se desea eliminar
        responses:
          200:
            description: User deleted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          500:
            description: Error interno del servidor.
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/Error'

  components:
    schemas:
      User:
        type: object
        properties:
          _id:
            type: string
            description: ID del usuario autogenerado por MongoDB
            example: "ObjectId('638bb233f7504b3dedc9387e')"
          first_name:
            type: string
            description: Nombre del usuario
            example: "Juan"
          last_name:
            type: string
            description: Apellido del usuario
            example: "Pérez"
          password:
            type: string
            description: Contraseña del usuario
            example: "password123"
          email:
            type: string
            format: email
            description: Correo electrónico del usuario
            example: "juan.perez@example.com"
          role:
            type: string
            description: Rol del usuario (admin, user, etc.)
            example: "user"
          pets:
            type: array
            items:
              type: string
            description: Lista de IDs de mascotas asociadas al usuario
            example: ["ObjectId('638bb233f7504b3dedc9387f')", "ObjectId('638bb233f7504b3dedc93880')"]
      UserUpdate:
        type: object
        properties:
          first_name:
            type: string
            description: Nombre del usuario
            example: "Juan"
          last_name:
            type: string
            description: Apellido del usuario
            example: "Pérez"
          password:
            type: string
            description: Contraseña del usuario
            example: "password123"
          email:
            type: string
            format: email
            description: Correo electrónico del usuario
            example: "juan.perez@example.com"
      Error:
        type: object
        properties:
          message:
            type: string
          code:
            type: integer
        required:
          - message
          - code
